{"ast":null,"code":"export const REQUEST_TOKEN = 'REQUEST_TOKEN';\nexport const RECEIVE_USER_DATA = 'RECEIVE_USER_DATA';\nexport const ACCESS_TOKEN_WAS_NOT_VALID = 'ACCESS_TOKEN_WAS_NOT_VALID';\nexport const REFRESH_TOKEN_WAS_NOT_VALID = 'REFRESH_TOKEN_WAS_NOT_VALID';\nexport function requestToken() {\n  return {\n    type: REQUEST_TOKEN\n  };\n}\nexport function receiveUserData(userData) {\n  return {\n    type: RECEIVE_USER_DATA,\n    userData: userData\n  };\n}\nexport function accessTokenWasNotValid() {\n  return {\n    type: ACCESS_TOKEN_WAS_NOT_VALID\n  };\n}\nexport function refreshTokenWasNotValid() {\n  return {\n    type: REFRESH_TOKEN_WAS_NOT_VALID\n  };\n}\nexport function refreshTokensAction(path, refreshToken) {\n  return refreshTokens(path, refreshToken);\n}\n\nasync function refreshTokens(path, refreshToken) {\n  const resp = await fetch(path, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer ' + refreshToken\n    }\n  });\n  const json = await resp.json();\n\n  if (jsin.statusCode === 401) {}\n\n  return await json;\n}\n\nexport function logInWithToken(path, token, refreshPath, refreshToken) {\n  return async function (dispatch) {\n    dispatch(requestToken());\n\n    async function tryLog() {\n      const resp = await fetch(path, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': 'Bearer ' + token\n        }\n      });\n      return await resp.json();\n    }\n\n    const json = await tryLog();\n    console.log(json);\n\n    if (json.statusCode === 401) {\n      dispatch(accessTokenWasNotValid());\n      const refreshJson = await refreshTokens(refreshPath, refreshToken);\n\n      if (refreshJson.statusCode === 401) {\n        console.log(refreshJson);\n        dispatch(receiveUserData({}));\n      }\n    } else dispatch(receiveUserData(json));\n\n    return await json;\n  };\n}","map":{"version":3,"sources":["C:/Users/Bogdan/Desktop/Task 3 React/my-app/src/actions/tokenManagement.js"],"names":["REQUEST_TOKEN","RECEIVE_USER_DATA","ACCESS_TOKEN_WAS_NOT_VALID","REFRESH_TOKEN_WAS_NOT_VALID","requestToken","type","receiveUserData","userData","accessTokenWasNotValid","refreshTokenWasNotValid","refreshTokensAction","path","refreshToken","refreshTokens","resp","fetch","method","headers","json","jsin","statusCode","logInWithToken","token","refreshPath","dispatch","tryLog","console","log","refreshJson"],"mappings":"AAAA,OAAO,MAAMA,aAAa,GAAG,eAAtB;AACP,OAAO,MAAMC,iBAAiB,GAAG,mBAA1B;AACP,OAAO,MAAMC,0BAA0B,GAAG,4BAAnC;AACP,OAAO,MAAMC,2BAA2B,GAAG,6BAApC;AACP,OAAO,SAASC,YAAT,GAAwB;AAC3B,SAAO;AACHC,IAAAA,IAAI,EAAEL;AADH,GAAP;AAGH;AACD,OAAO,SAASM,eAAT,CAAyBC,QAAzB,EAAmC;AACtC,SAAO;AACHF,IAAAA,IAAI,EAAEJ,iBADH;AAEHM,IAAAA,QAAQ,EAAEA;AAFP,GAAP;AAIH;AACD,OAAO,SAASC,sBAAT,GAAkC;AACrC,SAAO;AACHH,IAAAA,IAAI,EAAEH;AADH,GAAP;AAGH;AACD,OAAO,SAASO,uBAAT,GAAmC;AACtC,SAAO;AACHJ,IAAAA,IAAI,EAAEF;AADH,GAAP;AAGH;AACD,OAAO,SAASO,mBAAT,CAA6BC,IAA7B,EAAmCC,YAAnC,EAAiD;AACpD,SAAOC,aAAa,CAACF,IAAD,EAAMC,YAAN,CAApB;AACH;;AACD,eAAeC,aAAf,CAA6BF,IAA7B,EAAmCC,YAAnC,EAAiD;AAC7C,QAAME,IAAI,GAAG,MAAMC,KAAK,CACpBJ,IADoB,EAEpB;AACIK,IAAAA,MAAM,EAAE,MADZ;AAEIC,IAAAA,OAAO,EAAE;AACL,uBAAiB,YAAYL;AADxB;AAFb,GAFoB,CAAxB;AASA,QAAMM,IAAI,GAAG,MAAMJ,IAAI,CAACI,IAAL,EAAnB;;AACA,MAAGC,IAAI,CAACC,UAAL,KAAoB,GAAvB,EAA2B,CAE1B;;AACD,SAAO,MAAMF,IAAb;AACH;;AACD,OAAO,SAASG,cAAT,CAAwBV,IAAxB,EAA8BW,KAA9B,EAAoCC,WAApC,EAAgDX,YAAhD,EAA8D;AACjE,SAAO,gBAAgBY,QAAhB,EAA0B;AAC7BA,IAAAA,QAAQ,CAACpB,YAAY,EAAb,CAAR;;AACA,mBAAeqB,MAAf,GAAwB;AACpB,YAAMX,IAAI,GAAG,MAAMC,KAAK,CACpBJ,IADoB,EAEpB;AACIK,QAAAA,MAAM,EAAE,KADZ;AAEIC,QAAAA,OAAO,EAAE;AACL,0BAAgB,kBADX;AAEL,2BAAiB,YAAYK;AAFxB;AAFb,OAFoB,CAAxB;AAUA,aAAO,MAAMR,IAAI,CAACI,IAAL,EAAb;AACH;;AACD,UAAMA,IAAI,GAAG,MAAMO,MAAM,EAAzB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAYT,IAAZ;;AACA,QAAIA,IAAI,CAACE,UAAL,KAAoB,GAAxB,EAA4B;AACxBI,MAAAA,QAAQ,CAAChB,sBAAsB,EAAvB,CAAR;AACA,YAAMoB,WAAW,GAAG,MAAMf,aAAa,CAACU,WAAD,EAAaX,YAAb,CAAvC;;AACA,UAAGgB,WAAW,CAACR,UAAZ,KAA2B,GAA9B,EAAkC;AAC9BM,QAAAA,OAAO,CAACC,GAAR,CAAYC,WAAZ;AACAJ,QAAAA,QAAQ,CAAClB,eAAe,CAAC,EAAD,CAAhB,CAAR;AACH;AACJ,KAPD,MAQIkB,QAAQ,CAAClB,eAAe,CAACY,IAAD,CAAhB,CAAR;;AACJ,WAAO,MAAMA,IAAb;AACH,GA3BD;AA4BH","sourcesContent":["export const REQUEST_TOKEN = 'REQUEST_TOKEN';\r\nexport const RECEIVE_USER_DATA = 'RECEIVE_USER_DATA';\r\nexport const ACCESS_TOKEN_WAS_NOT_VALID = 'ACCESS_TOKEN_WAS_NOT_VALID';\r\nexport const REFRESH_TOKEN_WAS_NOT_VALID = 'REFRESH_TOKEN_WAS_NOT_VALID';\r\nexport function requestToken() {\r\n    return {\r\n        type: REQUEST_TOKEN\r\n    }\r\n}\r\nexport function receiveUserData(userData) {\r\n    return {\r\n        type: RECEIVE_USER_DATA,\r\n        userData: userData\r\n    }\r\n}\r\nexport function accessTokenWasNotValid() {\r\n    return {\r\n        type: ACCESS_TOKEN_WAS_NOT_VALID\r\n    }\r\n}\r\nexport function refreshTokenWasNotValid() {\r\n    return {\r\n        type: REFRESH_TOKEN_WAS_NOT_VALID\r\n    }\r\n}\r\nexport function refreshTokensAction(path, refreshToken) {\r\n    return refreshTokens(path,refreshToken)\r\n}\r\nasync function refreshTokens(path, refreshToken) {\r\n    const resp = await fetch(\r\n        path,\r\n        {\r\n            method: 'POST',\r\n            headers: {\r\n                'Authorization': 'Bearer ' + refreshToken\r\n            }\r\n        }\r\n    );\r\n    const json = await resp.json();\r\n    if(jsin.statusCode === 401){\r\n        \r\n    }\r\n    return await json;\r\n}\r\nexport function logInWithToken(path, token,refreshPath,refreshToken) {\r\n    return async function (dispatch) {\r\n        dispatch(requestToken());\r\n        async function tryLog() {\r\n            const resp = await fetch(\r\n                path,\r\n                {\r\n                    method: 'GET',\r\n                    headers: {\r\n                        'Content-Type': 'application/json',\r\n                        'Authorization': 'Bearer ' + token\r\n                    }\r\n                }\r\n            );\r\n            return await resp.json();\r\n        }\r\n        const json = await tryLog();\r\n        console.log(json);\r\n        if (json.statusCode === 401){\r\n            dispatch(accessTokenWasNotValid());\r\n            const refreshJson = await refreshTokens(refreshPath,refreshToken);\r\n            if(refreshJson.statusCode === 401){\r\n                console.log(refreshJson);\r\n                dispatch(receiveUserData({}));\r\n            }\r\n        }else\r\n            dispatch(receiveUserData(json))\r\n        return await json;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}